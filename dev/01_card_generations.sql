-- Drop the old table if it exists to ensure a clean slate
DROP TABLE IF EXISTS public.card_generations CASCADE;

-- Create the table with all necessary columns
CREATE TABLE public.card_generations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Auto-incrementing database ID
    extended_id TEXT UNIQUE,                  -- Stores "<db_id> <CARD_ID_SUFFIX>", set after initial insert
    hex_color TEXT NOT NULL,                  -- Hex color string, e.g., #FFFFFF, from initial request
    status TEXT DEFAULT 'pending_id' NOT NULL, -- Tracks state: 'pending_id', 'processing_images', 'completed', 'failed'
    horizontal_image_url TEXT,                -- URL for horizontal image from Vercel Blob
    vertical_image_url TEXT,                  -- URL for vertical image from Vercel Blob
    metadata JSONB,                           -- AI-generated JSON details, added in finalize step
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Trigger function to automatically update 'updated_at' timestamp
CREATE OR REPLACE FUNCTION public.set_current_timestamp_updated_at()
RETURNS TRIGGER AS $$
DECLARE
  _new RECORD;
BEGIN
  _new := NEW;
  _new."updated_at" = NOW();
  RETURN _new;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger to the table
CREATE TRIGGER set_card_generations_updated_at
BEFORE UPDATE ON public.card_generations
FOR EACH ROW
EXECUTE FUNCTION public.set_current_timestamp_updated_at();

-- Indexes for common query patterns
CREATE INDEX IF NOT EXISTS idx_card_generations_status ON public.card_generations(status);
-- The UNIQUE constraint on extended_id automatically creates an index.
-- Consider an index on hex_color if you query by it often without other filters.
-- CREATE INDEX IF NOT EXISTS idx_card_generations_hex_color ON public.card_generations(hex_color);